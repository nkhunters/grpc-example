// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: example.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "nice_grpc.example";

/** ... */
export interface ExampleRequest {
}

/** ... */
export interface ExampleResponse {
}

function createBaseExampleRequest(): ExampleRequest {
  return {};
}

export const ExampleRequest: MessageFns<ExampleRequest> = {
  encode(_: ExampleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExampleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExampleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ExampleRequest {
    return {};
  },

  toJSON(_: ExampleRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ExampleRequest>): ExampleRequest {
    return ExampleRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ExampleRequest>): ExampleRequest {
    const message = createBaseExampleRequest();
    return message;
  },
};

function createBaseExampleResponse(): ExampleResponse {
  return {};
}

export const ExampleResponse: MessageFns<ExampleResponse> = {
  encode(_: ExampleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExampleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExampleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ExampleResponse {
    return {};
  },

  toJSON(_: ExampleResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ExampleResponse>): ExampleResponse {
    return ExampleResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ExampleResponse>): ExampleResponse {
    const message = createBaseExampleResponse();
    return message;
  },
};

export type ExampleServiceDefinition = typeof ExampleServiceDefinition;
export const ExampleServiceDefinition = {
  name: "ExampleService",
  fullName: "nice_grpc.example.ExampleService",
  methods: {
    exampleUnaryMethod: {
      name: "ExampleUnaryMethod",
      requestType: ExampleRequest,
      requestStream: false,
      responseType: ExampleResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ExampleServiceImplementation<CallContextExt = {}> {
  exampleUnaryMethod(
    request: ExampleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExampleResponse>>;
}

export interface ExampleServiceClient<CallOptionsExt = {}> {
  exampleUnaryMethod(
    request: DeepPartial<ExampleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExampleResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
