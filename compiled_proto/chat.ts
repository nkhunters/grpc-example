// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: chat.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "chat";

export interface Message {
  userId: string;
  content: string;
  timestamp: string;
}

export interface MessageResponse {
  success: boolean;
  messageId: string;
}

export interface SubscribeRequest {
  userId: string;
}

export interface UploadResponse {
  messagesReceived: number;
  success: boolean;
}

function createBaseMessage(): Message {
  return { userId: "", content: "", timestamp: "" };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.timestamp !== "") {
      writer.uint32(26).string(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create(base?: DeepPartial<Message>): Message {
    return Message.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Message>): Message {
    const message = createBaseMessage();
    message.userId = object.userId ?? "";
    message.content = object.content ?? "";
    message.timestamp = object.timestamp ?? "";
    return message;
  },
};

function createBaseMessageResponse(): MessageResponse {
  return { success: false, messageId: "" };
}

export const MessageResponse: MessageFns<MessageResponse> = {
  encode(message: MessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.messageId !== "") {
      writer.uint32(18).string(message.messageId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
    };
  },

  toJSON(message: MessageResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    return obj;
  },

  create(base?: DeepPartial<MessageResponse>): MessageResponse {
    return MessageResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageResponse>): MessageResponse {
    const message = createBaseMessageResponse();
    message.success = object.success ?? false;
    message.messageId = object.messageId ?? "";
    return message;
  },
};

function createBaseSubscribeRequest(): SubscribeRequest {
  return { userId: "" };
}

export const SubscribeRequest: MessageFns<SubscribeRequest> = {
  encode(message: SubscribeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: SubscribeRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<SubscribeRequest>): SubscribeRequest {
    return SubscribeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscribeRequest>): SubscribeRequest {
    const message = createBaseSubscribeRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseUploadResponse(): UploadResponse {
  return { messagesReceived: 0, success: false };
}

export const UploadResponse: MessageFns<UploadResponse> = {
  encode(message: UploadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messagesReceived !== 0) {
      writer.uint32(8).int32(message.messagesReceived);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.messagesReceived = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadResponse {
    return {
      messagesReceived: isSet(object.messagesReceived) ? globalThis.Number(object.messagesReceived) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
    };
  },

  toJSON(message: UploadResponse): unknown {
    const obj: any = {};
    if (message.messagesReceived !== 0) {
      obj.messagesReceived = Math.round(message.messagesReceived);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create(base?: DeepPartial<UploadResponse>): UploadResponse {
    return UploadResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadResponse>): UploadResponse {
    const message = createBaseUploadResponse();
    message.messagesReceived = object.messagesReceived ?? 0;
    message.success = object.success ?? false;
    return message;
  },
};

export type ChatServiceDefinition = typeof ChatServiceDefinition;
export const ChatServiceDefinition = {
  name: "ChatService",
  fullName: "chat.ChatService",
  methods: {
    /** Unary RPC */
    sendMessage: {
      name: "SendMessage",
      requestType: Message,
      requestStream: false,
      responseType: MessageResponse,
      responseStream: false,
      options: {},
    },
    /** Server Streaming RPC */
    subscribeToMessages: {
      name: "SubscribeToMessages",
      requestType: SubscribeRequest,
      requestStream: false,
      responseType: Message,
      responseStream: true,
      options: {},
    },
    /** Client Streaming RPC */
    uploadMessages: {
      name: "UploadMessages",
      requestType: Message,
      requestStream: true,
      responseType: UploadResponse,
      responseStream: false,
      options: {},
    },
    /** Bidirectional Streaming RPC */
    chat: {
      name: "Chat",
      requestType: Message,
      requestStream: true,
      responseType: Message,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface ChatServiceImplementation<CallContextExt = {}> {
  /** Unary RPC */
  sendMessage(request: Message, context: CallContext & CallContextExt): Promise<DeepPartial<MessageResponse>>;
  /** Server Streaming RPC */
  subscribeToMessages(
    request: SubscribeRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<Message>>;
  /** Client Streaming RPC */
  uploadMessages(
    request: AsyncIterable<Message>,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UploadResponse>>;
  /** Bidirectional Streaming RPC */
  chat(
    request: AsyncIterable<Message>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<Message>>;
}

export interface ChatServiceClient<CallOptionsExt = {}> {
  /** Unary RPC */
  sendMessage(request: DeepPartial<Message>, options?: CallOptions & CallOptionsExt): Promise<MessageResponse>;
  /** Server Streaming RPC */
  subscribeToMessages(
    request: DeepPartial<SubscribeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<Message>;
  /** Client Streaming RPC */
  uploadMessages(
    request: AsyncIterable<DeepPartial<Message>>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UploadResponse>;
  /** Bidirectional Streaming RPC */
  chat(request: AsyncIterable<DeepPartial<Message>>, options?: CallOptions & CallOptionsExt): AsyncIterable<Message>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
